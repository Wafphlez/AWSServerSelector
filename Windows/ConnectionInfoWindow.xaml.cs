using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Threading;
using System.Management;

namespace AWSServerSelector
{
    public partial class ConnectionInfoWindow : Window, INotifyPropertyChanged
    {
        #region Fields

        private DispatcherTimer? _monitoringTimer;
        private const string DBD_PROCESS_NAME = "DeadByDaylight-Win64-Shipping";
        private readonly Ping _pinger = new();
        private ConnectionInfo? _currentLobbyConnection;
        private ConnectionInfo? _currentGameConnection;
        private UdpGameMonitor? _udpMonitor;
        private bool _udpMonitorStarted = false;
        private HashSet<int> _monitoredUdpPorts = new();
        
        // –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ DispatcherTimer)
        private DispatcherTimer? _pingTimer;
        private Ping? _backgroundPinger; // –û—Ç–¥–µ–ª—å–Ω—ã–π Ping –æ–±—ä–µ–∫—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!
        private string? _currentGameServerIp;
        private int _currentGameServerPort;
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ IP –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        private string? _lastLobbyIp;
        private int _lastLobbyPort;
        private string? _lastGameIp;
        private int _lastGamePort;

        #endregion

        #region Constructor

        public ConnectionInfoWindow()
        {
            InitializeComponent();
            Loaded += ConnectionInfoWindow_Loaded;
            Closing += ConnectionInfoWindow_Closing;
        }

        #endregion

        #region Events

        public event PropertyChangedEventHandler? PropertyChanged;

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion

        #region Lifecycle Methods

        private void ConnectionInfoWindow_Loaded(object sender, RoutedEventArgs e)
        {
            StartMonitoring();
        }

        private void ConnectionInfoWindow_Closing(object? sender, CancelEventArgs e)
        {
            StopMonitoring();
            StopPingMonitoring();
            _udpMonitor?.Dispose();
            _udpMonitor = null;
        }

        #endregion

        #region Monitoring

        private void StartMonitoring()
        {
            _monitoringTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(5)
            };
            _monitoringTimer.Tick += async (s, e) => await MonitorConnectionsAsync();
            _monitoringTimer.Start();

            // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
            _ = MonitorConnectionsAsync();
        }

        private void StopMonitoring()
        {
            _monitoringTimer?.Stop();
            _monitoringTimer = null;
        }

        private void StartUdpMonitor(int processId)
        {
            try
            {
                Debug.WriteLine("========================================");
                Debug.WriteLine("üöÄ –ó–∞–ø—É—Å–∫ UDP –º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã...");
                Debug.WriteLine("========================================");

                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ UDP –ø–æ—Ä—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ DBD
                var udpConnections = GetActiveUdpConnections();
                var dbdPorts = udpConnections
                    .Where(c => c.ProcessId == processId)
                    .Select(c => c.LocalPort)
                    .Where(p => p > 0)
                    .ToHashSet();

                if (!dbdPorts.Any())
                {
                    Debug.WriteLine("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ UDP –ø–æ—Ä—Ç–æ–≤ –¥–ª—è DBD");
                    Debug.WriteLine("   –ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á, UDP –ø–æ—Ä—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ");
                    return;
                }

                Debug.WriteLine($"üì° –ù–∞–π–¥–µ–Ω–æ {dbdPorts.Count} UDP –ø–æ—Ä—Ç–æ–≤ DBD");
                Debug.WriteLine($"   –ü–æ—Ä—Ç—ã: {string.Join(", ", dbdPorts.Take(10))}");

                _udpMonitor = new UdpGameMonitor();
                _udpMonitor.GameServerDetected += UdpMonitor_GameServerDetected;
                
                Debug.WriteLine("üîß –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –ø–∞–∫–µ—Ç–æ–≤...");
                if (_udpMonitor.StartCapture(dbdPorts))
                {
                    _udpMonitorStarted = true;
                    _monitoredUdpPorts = dbdPorts;
                    Debug.WriteLine("========================================");
                    Debug.WriteLine("‚úÖ‚úÖ‚úÖ UDP –º–æ–Ω–∏—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! ‚úÖ‚úÖ‚úÖ");
                    Debug.WriteLine("========================================");
                }
                else
                {
                    Debug.WriteLine("========================================");
                    Debug.WriteLine("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ü–£–°–¢–ò–¢–¨ UDP –ú–û–ù–ò–¢–û–†");
                    Debug.WriteLine("========================================");
                    Debug.WriteLine("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:");
                    Debug.WriteLine("   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Npcap —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –æ–ø—Ü–∏–µ–π 'WinPcap API-compatible Mode'");
                    Debug.WriteLine("   2. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (Wireshark, VPN)");
                    Debug.WriteLine("   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Npcap");
                    Debug.WriteLine("");
                    Debug.WriteLine("‚ö†Ô∏è TCP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ª–æ–±–±–∏) –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ!");
                    Debug.WriteLine("‚ö†Ô∏è UDP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–º–∞—Ç—á) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    Dispatcher.Invoke(() =>
                    {
                        MessageBox.Show(
                            "UDP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n" +
                            "–ë—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–ª–æ–±–±–∏).\n\n" +
                            "–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ UDP (–º–∞—Ç—á–∞) —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n" +
                            "‚Ä¢ Npcap —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –æ–ø—Ü–∏–µ–π 'WinPcap API-compatible Mode'\n" +
                            "‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ Wireshark –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ø–∞–∫–µ—Ç–æ–≤\n" +
                            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Npcap\n\n" +
                            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ UDP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
                            "UDP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                            MessageBoxButton.OK,
                            MessageBoxImage.Information);
                    });
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("========================================");
                Debug.WriteLine($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê UDP –ú–û–ù–ò–¢–û–†–ê");
                Debug.WriteLine("========================================");
                Debug.WriteLine($"–¢–∏–ø: {ex.GetType().Name}");
                Debug.WriteLine($"–°–æ–æ–±—â–µ–Ω–∏–µ: {ex.Message}");
                Debug.WriteLine($"StackTrace: {ex.StackTrace}");
                
                if (ex.InnerException != null)
                {
                    Debug.WriteLine($"Inner Exception: {ex.InnerException.Message}");
                }
            }
        }

        private void UdpMonitor_GameServerDetected(object? sender, UdpGameMonitor.GameServerInfo e)
        {
            Debug.WriteLine($"üéÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä: {e.RemoteAddress}:{e.RemotePort}");
        }

        private async Task EnsureUdpMonitorRunningAsync(int processId)
        {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ UDP –ø–æ—Ä—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ DBD
            var udpConnections = GetActiveUdpConnections();
            var currentPorts = udpConnections
                .Where(c => c.ProcessId == processId)
                .Select(c => c.LocalPort)
                .Where(p => p > 0)
                .ToHashSet();

            // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ä—Ç–æ–≤ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
            if (!currentPorts.Any())
            {
                if (_udpMonitorStarted)
                {
                    Debug.WriteLine("========================================");
                    Debug.WriteLine("üö™ UDP –ø–æ—Ä—Ç—ã –∏—Å—á–µ–∑–ª–∏ - –∏–≥—Ä–æ–∫ –≤—ã—à–µ–ª –∏–∑ –º–∞—Ç—á–∞");
                    Debug.WriteLine("========================================");
                    
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
                    if (_udpMonitor != null)
                    {
                        Debug.WriteLine("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ UDP –º–æ–Ω–∏—Ç–æ—Ä–∞...");
                        _udpMonitor.Dispose();
                        _udpMonitor = null;
                    }
                    
                    _udpMonitorStarted = false;
                    _monitoredUdpPorts.Clear();
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π IP –∏–≥—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                    _lastGameIp = null;
                    _lastGamePort = 0;
                    
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–∏–Ω–≥–µ—Ä
                    StopPingMonitoring();
                    
                    Debug.WriteLine("‚úÖ UDP –º–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                }
                else
                {
                    Debug.WriteLine("‚ö†Ô∏è UDP –ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–∏–≥—Ä–∞ –µ—â–µ –Ω–µ –≤ –º–∞—Ç—á–µ)");
                }
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –ø–æ—Ä—Ç—ã
            bool portsChanged = !_monitoredUdpPorts.SetEquals(currentPorts);

            if (portsChanged)
            {
                Debug.WriteLine("========================================");
                Debug.WriteLine($"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ/–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ UDP –ø–æ—Ä—Ç—ã");
                Debug.WriteLine($"   –°—Ç–∞—Ä—ã–µ –ø–æ—Ä—Ç—ã ({_monitoredUdpPorts.Count}): {string.Join(", ", _monitoredUdpPorts.Take(5))}");
                Debug.WriteLine($"   –ù–æ–≤—ã–µ –ø–æ—Ä—Ç—ã ({currentPorts.Count}): {string.Join(", ", currentPorts.Take(5))}");
                Debug.WriteLine("========================================");

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä
                if (_udpMonitor != null)
                {
                    Debug.WriteLine("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ UDP –º–æ–Ω–∏—Ç–æ—Ä–∞...");
                    _udpMonitor.Dispose();
                    _udpMonitor = null;
                    _udpMonitorStarted = false;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Ä—Ç–æ–≤
                _monitoredUdpPorts = currentPorts;

                // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä
                StartUdpMonitor(processId);
            }
            else if (_udpMonitorStarted)
            {
                Debug.WriteLine($"‚úÖ UDP –º–æ–Ω–∏—Ç–æ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {_monitoredUdpPorts.Count} –ø–æ—Ä—Ç–∞–º–∏");
            }

            await Task.CompletedTask;
        }

        private async Task<ConnectionInfo?> GetUdpConnectionFromMonitorAsync()
        {
            if (_udpMonitor == null)
                return null;

            var gameServer = _udpMonitor.GetActiveGameServer();
            if (gameServer == null)
                return null;

            Debug.WriteLine($"üìä –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∞: {gameServer.RemoteAddress}:{gameServer.RemotePort}");

            var connectionInfo = new ConnectionInfo
            {
                Protocol = "UDP",
                RemoteAddress = gameServer.RemoteAddress,
                RemotePort = gameServer.RemotePort,
                LocalPort = gameServer.LocalPort,
                Ping = -1, // –ü–∏–Ω–≥ –±—É–¥–µ—Ç –∏–∑–º–µ—Ä–µ–Ω —Ñ–æ–Ω–æ–≤—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∫ GameLift —Ö–æ—Å—Ç—É
                ProcessId = -1 // –ù–µ –≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            };

            // –û–±–æ–≥–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–≥–∏–æ–Ω–µ AWS
            return await EnrichConnectionInfoAsync(connectionInfo);
        }


        private async Task MonitorConnectionsAsync()
        {
            try
            {
                var dbdProcess = GetDbdProcess();
                
                if (dbdProcess == null)
                {
                    Debug.WriteLine("DBD –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                    UpdateNoConnection();
                    return;
                }

                Debug.WriteLine($"DBD –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω: PID {dbdProcess.Id}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º UDP –ø–æ—Ä—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º UDP –º–æ–Ω–∏—Ç–æ—Ä –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                await EnsureUdpMonitorRunningAsync(dbdProcess.Id);

                // –ü–æ–ª—É—á–∞–µ–º TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è –ª–æ–±–±–∏)
                var tcpConnection = await GetTcpConnectionAsync(dbdProcess.Id);
                
                if (tcpConnection != null)
                {
                    Debug.WriteLine($"‚úÖ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {tcpConnection.RemoteAddress}:{tcpConnection.RemotePort}");
                }
                else
                {
                    Debug.WriteLine("‚ö†Ô∏è TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                }
                
                // –ü–æ–ª—É—á–∞–µ–º UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è –∏–≥—Ä—ã) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω
                ConnectionInfo? udpConnection = null;
                
                if (_udpMonitorStarted && _udpMonitor != null)
                {
                    // –ú–æ–Ω–∏—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    udpConnection = await GetUdpConnectionFromMonitorAsync();
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                if (udpConnection == null)
                {
                    udpConnection = await GetUdpConnectionAsync(dbdProcess.Id);
                }
                
                if (udpConnection != null)
                {
                    Debug.WriteLine($"‚úÖ UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {udpConnection.RemoteAddress}:{udpConnection.RemotePort}");
                }
                else
                {
                    Debug.WriteLine("‚ö†Ô∏è UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                await UpdateUIAsync(tcpConnection, udpConnection);
                
                UpdateLastUpdateTime();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
                Debug.WriteLine($"Stack trace: {ex.StackTrace}");
            }
        }

        private Process? GetDbdProcess()
        {
            try
            {
                var processes = Process.GetProcessesByName(DBD_PROCESS_NAME);
                return processes.FirstOrDefault();
            }
            catch
            {
                return null;
            }
        }

        private async Task<ConnectionInfo?> GetTcpConnectionAsync(int processId)
        {
            try
            {
                var connections = GetActiveTcpConnections();
                Debug.WriteLine($"–í—Å–µ–≥–æ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {connections.Count}");
                
                // DBD –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS (–ø–æ—Ä—Ç 443) –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –ª–æ–±–±–∏/–º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞
                var dbdConnections = connections
                    .Where(c => c.ProcessId == processId)
                    .Where(c => c.State == TcpState.Established)
                    .Where(c => !IsLocalAddress(c.RemoteAddress))
                    .Where(c => c.RemotePort == 443) // DBD –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS
                    .ToList();

                Debug.WriteLine($"TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π DBD –Ω–∞ –ø–æ—Ä—Ç—É 443: {dbdConnections.Count}");

                if (dbdConnections.Any())
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â—ë –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    if (!string.IsNullOrEmpty(_lastLobbyIp) && _lastLobbyPort > 0)
                    {
                        var existingConn = dbdConnections.FirstOrDefault(c => 
                            c.RemoteAddress == _lastLobbyIp && c.RemotePort == _lastLobbyPort);
                        
                        if (existingConn != null)
                        {
                            Debug.WriteLine($"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {existingConn.RemoteAddress}:{existingConn.RemotePort}");
                            return await EnrichConnectionInfoAsync(existingConn);
                        }
                        else
                        {
                            Debug.WriteLine($"‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ({_lastLobbyIp}:{_lastLobbyPort}) –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ");
                            _lastLobbyIp = null;
                            _lastLobbyPort = 0;
                        }
                    }
                    
                    Debug.WriteLine($"–ü—Ä–æ–≤–µ—Ä—è–µ–º {dbdConnections.Count} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ AWS...");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ AWS —Å–µ—Ä–≤–µ—Ä–∞–º
                    foreach (var conn in dbdConnections)
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ IP –∞–¥—Ä–µ—Å–æ–º AWS
                        var isAws = await AwsIpRangeManager.Instance.IsAwsIpAsync(conn.RemoteAddress);
                        Debug.WriteLine($"  {conn.RemoteAddress}:{conn.RemotePort} - AWS: {isAws}");
                        
                        if (isAws)
                        {
                            Debug.WriteLine($"‚úÖ –í—ã–±—Ä–∞–Ω–æ –Ω–æ–≤–æ–µ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ AWS: {conn.RemoteAddress}:{conn.RemotePort}");
                            _lastLobbyIp = conn.RemoteAddress;
                            _lastLobbyPort = conn.RemotePort;
                            var enriched = await EnrichConnectionInfoAsync(conn);
                            Debug.WriteLine($"   –û–±–æ–≥–∞—â–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: Region={enriched.Region}, Ping={enriched.Ping}ms");
                            return enriched;
                        }
                    }
                    
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ AWS, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ 443
                    var firstConn = dbdConnections.First();
                    Debug.WriteLine($"‚ö†Ô∏è AWS –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {firstConn.RemoteAddress}:{firstConn.RemotePort}");
                    _lastLobbyIp = firstConn.RemoteAddress;
                    _lastLobbyPort = firstConn.RemotePort;
                    return await EnrichConnectionInfoAsync(firstConn);
                }

                Debug.WriteLine("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π");
                return null;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {ex.Message}");
                Debug.WriteLine($"Stack trace: {ex.StackTrace}");
                return null;
            }
        }

        private async Task<ConnectionInfo?> GetUdpConnectionAsync(int processId)
        {
            try
            {
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ PowerShell
                var udpFromPowerShell = await GetUdpConnectionsViaPowerShellAsync(processId);
                if (udpFromPowerShell != null)
                {
                    Debug.WriteLine($"–ù–∞–π–¥–µ–Ω–æ UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PowerShell: {udpFromPowerShell.RemoteAddress}:{udpFromPowerShell.RemotePort}");
                    return await EnrichConnectionInfoAsync(udpFromPowerShell);
                }

                var connections = GetActiveUdpConnections();
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ UDP —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
                var dbdConnection = connections
                    .Where(c => c.ProcessId == processId)
                    .Where(c => !string.IsNullOrEmpty(c.RemoteAddress) && c.RemoteAddress != "0.0.0.0")
                    .Where(c => !IsLocalAddress(c.RemoteAddress))
                    .OrderByDescending(c => c.RemotePort) // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –ø–æ—Ä—Ç—ã –≤—ã—à–µ
                    .FirstOrDefault();

                if (dbdConnection != null)
                {
                    Debug.WriteLine($"–ù–∞–π–¥–µ–Ω–æ UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {dbdConnection.RemoteAddress}:{dbdConnection.RemotePort}");
                    return await EnrichConnectionInfoAsync(dbdConnection);
                }

                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
                Debug.WriteLine("UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Windows netstat)");
                return null;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {ex.Message}");
                return null;
            }
        }

        private async Task<ConnectionInfo?> GetUdpConnectionsViaPowerShellAsync(int processId)
        {
            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "powershell.exe",
                    Arguments = $"-NoProfile -Command \"Get-NetUDPEndpoint | Where-Object {{ $_.OwningProcess -eq {processId} }} | Select-Object LocalAddress, LocalPort, RemoteAddress, RemotePort | ConvertTo-Json\"",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using var process = Process.Start(psi);
                if (process != null)
                {
                    var output = await process.StandardOutput.ReadToEndAsync();
                    var error = await process.StandardError.ReadToEndAsync();
                    await process.WaitForExitAsync();

                    if (!string.IsNullOrWhiteSpace(output) && output.Contains("LocalAddress"))
                    {
                        // –ü–∞—Ä—Å–∏–º JSON (–ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                        // –ü–æ–∫–∞ —á—Ç–æ PowerShell —Ç–æ–∂–µ –Ω–µ –¥–∞—Å—Ç –Ω–∞–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è UDP
                        //Debug.WriteLine($"PowerShell UDP output: {output}");
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UDP —á–µ—Ä–µ–∑ PowerShell: {ex.Message}");
            }

            return null;
        }

        private bool IsLocalAddress(string address)
        {
            if (string.IsNullOrEmpty(address)) return true;
            
            if (address.StartsWith("127.") || 
                address.StartsWith("192.168.") || 
                address.StartsWith("10.") ||
                address.StartsWith("172.16.") ||
                address.StartsWith("169.254.") ||
                address == "0.0.0.0" ||
                address == "::" ||
                address == "::1")
            {
                return true;
            }

            return false;
        }

        private async Task<ConnectionInfo> EnrichConnectionInfoAsync(ConnectionInfo connection)
        {
            // –ò–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–∑–º–µ—Ä–µ–Ω)
            if (connection.Ping < 0)
            {
                try
                {
                    var reply = await _pinger.SendPingAsync(connection.RemoteAddress, 2000);
                    connection.Ping = reply.Status == IPStatus.Success ? reply.RoundtripTime : -1;
                }
                catch
                {
                    connection.Ping = -1;
                }
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω AWS
            try
            {
                var region = await AwsIpRangeManager.Instance.GetAwsRegionAsync(connection.RemoteAddress);
                var service = await AwsIpRangeManager.Instance.GetAwsServiceAsync(connection.RemoteAddress);
                
                Debug.WriteLine($"üåç AWS Region lookup –¥–ª—è {connection.RemoteAddress}: region={region}, service={service}");
                
                if (region != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" && region != "Unknown")
                {
                    connection.Region = FormatRegion(region);
                    connection.ServerName = $"{service} - {region}";
                }
                else
                {
                    // Fallback: –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ ip-api.com
                    Debug.WriteLine($"‚ö†Ô∏è AWS region –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º ip-api.com...");
                    var (regionName, countryCode) = await GetRegionViaIpApiAsync(connection.RemoteAddress);
                    
                    if (!string.IsNullOrEmpty(regionName))
                    {
                        connection.Region = regionName;
                        connection.ServerName = $"–°–µ—Ä–≤–µ—Ä - {regionName}";
                        Debug.WriteLine($"‚úÖ –†–µ–≥–∏–æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ä–µ–∑ ip-api: {regionName}");
                    }
                    else
                    {
                        connection.Region = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω";
                        connection.ServerName = $"–°–µ—Ä–≤–µ—Ä {connection.RemoteAddress}";
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {ex.Message}");
                connection.Region = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω";
                connection.ServerName = $"–°–µ—Ä–≤–µ—Ä {connection.RemoteAddress}";
            }

            return connection;
        }

        private async Task<(string regionName, string countryCode)> GetRegionViaIpApiAsync(string ip)
        {
            try
            {
                using var httpClient = new System.Net.Http.HttpClient();
                httpClient.Timeout = TimeSpan.FromSeconds(5);
                
                var response = await httpClient.GetStringAsync($"http://ip-api.com/json/{ip}?fields=status,country,countryCode,regionName,city");
                
                // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ JSON (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
                if (response.Contains("\"status\":\"success\""))
                {
                    var country = ExtractJsonValue(response, "country");
                    var countryCode = ExtractJsonValue(response, "countryCode");
                    var regionName = ExtractJsonValue(response, "regionName");
                    var city = ExtractJsonValue(response, "city");
                    
                    var fullName = "";
                    if (!string.IsNullOrEmpty(city) && !string.IsNullOrEmpty(regionName))
                        fullName = $"{GetFlag(countryCode)} {city}, {regionName}, {country}";
                    else if (!string.IsNullOrEmpty(regionName))
                        fullName = $"{GetFlag(countryCode)} {regionName}, {country}";
                    else
                        fullName = $"{GetFlag(countryCode)} {country}";
                    
                    return (fullName, countryCode);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"–û—à–∏–±–∫–∞ ip-api: {ex.Message}");
            }
            
            return ("", "");
        }

        private string ExtractJsonValue(string json, string key)
        {
            try
            {
                var searchKey = $"\"{key}\":\"";
                var startIndex = json.IndexOf(searchKey);
                if (startIndex < 0) return "";
                
                startIndex += searchKey.Length;
                var endIndex = json.IndexOf("\"", startIndex);
                if (endIndex < 0) return "";
                
                return json.Substring(startIndex, endIndex - startIndex);
            }
            catch
            {
                return "";
            }
        }

        private string GetFlag(string countryCode)
        {
            var flags = new Dictionary<string, string>
            {
                { "US", "üá∫üá∏" }, { "GB", "üá¨üáß" }, { "DE", "üá©üá™" }, { "FR", "üá´üá∑" },
                { "IE", "üáÆüá™" }, { "SE", "üá∏üá™" }, { "IT", "üáÆüáπ" }, { "JP", "üáØüáµ" },
                { "KR", "üá∞üá∑" }, { "SG", "üá∏üá¨" }, { "AU", "üá¶üá∫" }, { "IN", "üáÆüá≥" },
                { "BR", "üáßüá∑" }, { "CA", "üá®üá¶" }, { "BH", "üáßüá≠" }, { "ZA", "üáøüá¶" },
                { "HK", "üá≠üá∞" }, { "CN", "üá®üá≥" }
            };
            
            return flags.TryGetValue(countryCode, out var flag) ? flag : "üåç";
        }

        private string FormatRegion(string region)
        {
            var regionMap = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
            {
                { "us-east-1", "üá∫üá∏ US East (N. Virginia)" },
                { "us-east-2", "üá∫üá∏ US East (Ohio)" },
                { "us-west-1", "üá∫üá∏ US West (N. California)" },
                { "us-west-2", "üá∫üá∏ US West (Oregon)" },
                { "eu-west-1", "üáÆüá™ EU West (Ireland)" },
                { "eu-west-2", "üá¨üáß EU West (London)" },
                { "eu-west-3", "üá´üá∑ EU West (Paris)" },
                { "eu-central-1", "üá©üá™ EU Central (Frankfurt)" },
                { "eu-north-1", "üá∏üá™ EU North (Stockholm)" },
                { "eu-south-1", "üáÆüáπ EU South (Milan)" },
                { "ap-northeast-1", "üáØüáµ Asia Pacific (Tokyo)" },
                { "ap-northeast-2", "üá∞üá∑ Asia Pacific (Seoul)" },
                { "ap-northeast-3", "üáØüáµ Asia Pacific (Osaka)" },
                { "ap-southeast-1", "üá∏üá¨ Asia Pacific (Singapore)" },
                { "ap-southeast-2", "üá¶üá∫ Asia Pacific (Sydney)" },
                { "ap-south-1", "üáÆüá≥ Asia Pacific (Mumbai)" },
                { "sa-east-1", "üáßüá∑ South America (S√£o Paulo)" },
                { "ca-central-1", "üá®üá¶ Canada (Central)" },
                { "me-south-1", "üáßüá≠ Middle East (Bahrain)" },
                { "af-south-1", "üáøüá¶ Africa (Cape Town)" },
                { "ap-east-1", "üá≠üá∞ Asia Pacific (Hong Kong)" },
                { "cn-north-1", "üá®üá≥ China (Beijing)" },
                { "cn-northwest-1", "üá®üá≥ China (Ningxia)" }
            };

            return regionMap.TryGetValue(region, out var formatted) ? formatted : region;
        }

        #endregion

        #region Network Info Retrieval

        private List<ConnectionInfo> GetActiveTcpConnections()
        {
            var connections = new List<ConnectionInfo>();

            // –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ WMI
            try
            {
                using var searcher = new ManagementObjectSearcher(
                    "root\\StandardCimv2",
                    "SELECT * FROM MSFT_NetTCPConnection WHERE State = 5"); // 5 = Established
                
                using var results = searcher.Get();
                
                foreach (ManagementObject obj in results)
                {
                    try
                    {
                        var connection = new ConnectionInfo
                        {
                            Protocol = "TCP",
                            LocalAddress = obj["LocalAddress"]?.ToString() ?? "",
                            LocalPort = Convert.ToInt32(obj["LocalPort"]),
                            RemoteAddress = obj["RemoteAddress"]?.ToString() ?? "",
                            RemotePort = Convert.ToInt32(obj["RemotePort"]),
                            ProcessId = Convert.ToInt32(obj["OwningProcess"]),
                            State = TcpState.Established
                        };
                        connections.Add(connection);
                    }
                    catch { }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ WMI: {ex.Message}");
            }

            // –ï—Å–ª–∏ WMI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ netstat
            if (connections.Count == 0)
            {
                try
                {
                    connections = GetTcpConnectionsFromNetstat();
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ netstat: {ex.Message}");
                }
            }

            return connections;
        }

        private List<ConnectionInfo> GetTcpConnectionsFromNetstat()
        {
            var connections = new List<ConnectionInfo>();
            
            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "netstat",
                    Arguments = "-ano -p TCP",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using var process = Process.Start(psi);
                if (process != null)
                {
                    var output = process.StandardOutput.ReadToEnd();
                    process.WaitForExit();

                    var lines = output.Split('\n');
                    foreach (var line in lines)
                    {
                        if (string.IsNullOrWhiteSpace(line)) continue;
                        
                        var parts = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                        
                        // –§–æ—Ä–º–∞—Ç: TCP  LocalAddress:Port  RemoteAddress:Port  State  PID
                        if (parts.Length >= 5 && parts[0] == "TCP")
                        {
                            try
                            {
                                var state = parts[3];
                                if (state != "ESTABLISHED") continue;

                                var processId = int.Parse(parts[4]);
                                
                                var localParts = parts[1].Split(':');
                                var remoteParts = parts[2].Split(':');

                                var localAddress = localParts.Length > 1 
                                    ? string.Join(":", localParts.Take(localParts.Length - 1))
                                    : localParts[0];
                                var remoteAddress = remoteParts.Length > 1
                                    ? string.Join(":", remoteParts.Take(remoteParts.Length - 1))
                                    : remoteParts[0];

                                // –û—á–∏—â–∞–µ–º IPv6 —Å–∫–æ–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                                localAddress = localAddress.Trim('[', ']');
                                remoteAddress = remoteAddress.Trim('[', ']');

                                var connection = new ConnectionInfo
                                {
                                    Protocol = "TCP",
                                    LocalAddress = localAddress,
                                    LocalPort = int.Parse(localParts[^1]),
                                    RemoteAddress = remoteAddress,
                                    RemotePort = int.Parse(remoteParts[^1]),
                                    ProcessId = processId,
                                    State = TcpState.Established
                                };

                                connections.Add(connection);
                            }
                            catch (Exception ex)
                            {
                                Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ netstat TCP: {line}, {ex.Message}");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è netstat TCP: {ex.Message}");
            }

            return connections;
        }

        private List<ConnectionInfo> GetActiveUdpConnections()
        {
            var connections = new List<ConnectionInfo>();

            try
            {
                using var searcher = new ManagementObjectSearcher(
                    "SELECT * FROM MSFT_NetUDPEndpoint");
                
                using var results = searcher.Get();
                
                foreach (ManagementObject obj in results)
                {
                    try
                    {
                        var connection = new ConnectionInfo
                        {
                            Protocol = "UDP",
                            LocalAddress = obj["LocalAddress"]?.ToString() ?? "",
                            LocalPort = Convert.ToInt32(obj["LocalPort"]),
                            RemoteAddress = "", // UDP –Ω–µ –∏–º–µ–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ —Å—Ç–∞—Ç–∏–∫–µ
                            RemotePort = 0,
                            ProcessId = Convert.ToInt32(obj["OwningProcess"])
                        };
                        connections.Add(connection);
                    }
                    catch { }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ WMI: {ex.Message}");
            }

            // –î–ª—è UDP –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ netstat
            try
            {
                var processId = Process.GetProcessesByName(DBD_PROCESS_NAME).FirstOrDefault()?.Id;
                if (processId.HasValue)
                {
                    var udpConnections = GetUdpConnectionsFromNetstat(processId.Value);
                    connections.AddRange(udpConnections);
                }
            }
            catch { }

            return connections;
        }

        private List<ConnectionInfo> GetUdpConnectionsFromNetstat(int targetProcessId)
        {
            var connections = new List<ConnectionInfo>();
            
            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "netstat",
                    Arguments = "-ano -p UDP",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using var process = Process.Start(psi);
                if (process != null)
                {
                    var output = process.StandardOutput.ReadToEnd();
                    process.WaitForExit();

                    var lines = output.Split('\n');
                    foreach (var line in lines)
                    {
                        if (string.IsNullOrWhiteSpace(line)) continue;
                        
                        var parts = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                        
                        // –§–æ—Ä–º–∞—Ç UDP –≤ netstat: UDP  LocalAddress:Port  *:*  PID
                        // –ò–ª–∏: UDP  LocalAddress:Port  RemoteAddress:Port  PID (—Ä–µ–¥–∫–æ)
                        if (parts.Length >= 4 && parts[0] == "UDP")
                        {
                            try
                            {
                                var processId = int.Parse(parts[^1]);
                                if (processId == targetProcessId)
                                {
                                    var localParts = parts[1].Split(':');
                                    
                                    var localAddress = localParts.Length > 1 
                                        ? string.Join(":", localParts.Take(localParts.Length - 1))
                                        : localParts[0];
                                    
                                    // –û—á–∏—â–∞–µ–º IPv6 —Å–∫–æ–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                                    localAddress = localAddress.Trim('[', ']');

                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (–Ω–µ *:*)
                                    string remoteAddress = "";
                                    int remotePort = 0;
                                    
                                    if (parts.Length > 2 && parts[2] != "*:*" && parts[2].Contains(':'))
                                    {
                                        var remoteParts = parts[2].Split(':');
                                        remoteAddress = remoteParts.Length > 1 
                                            ? string.Join(":", remoteParts.Take(remoteParts.Length - 1))
                                            : remoteParts[0];
                                        remoteAddress = remoteAddress.Trim('[', ']');
                                        
                                        if (int.TryParse(remoteParts[^1], out var port))
                                        {
                                            remotePort = port;
                                        }
                                    }

                                    var connection = new ConnectionInfo
                                    {
                                        Protocol = "UDP",
                                        LocalAddress = localAddress,
                                        LocalPort = int.Parse(localParts[^1]),
                                        RemoteAddress = remoteAddress,
                                        RemotePort = remotePort,
                                        ProcessId = processId
                                    };

                                    // –î–ª—è UDP –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –¥–∞–∂–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                                    // –ü–æ—Ç–æ–º—É —á—Ç–æ UDP –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã
                                    connections.Add(connection);
                                }
                            }
                            catch (Exception ex)
                            {
                                Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ netstat UDP: {line}, {ex.Message}");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑ netstat: {ex.Message}");
            }

            return connections;
        }

        #endregion

        #region UI Updates

        private Task UpdateUIAsync(ConnectionInfo? tcpConnection, ConnectionInfo? udpConnection)
        {
            Debug.WriteLine($"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI: TCP={tcpConnection != null}, UDP={udpConnection != null}");
            
            _currentLobbyConnection = tcpConnection;
            _currentGameConnection = udpConnection;

            // –û–±–Ω–æ–≤–ª—è–µ–º TCP (–ª–æ–±–±–∏)
            if (tcpConnection != null)
            {
                Debug.WriteLine($"   TCP: {tcpConnection.RemoteAddress}:{tcpConnection.RemotePort}, Region={tcpConnection.Region}, Ping={tcpConnection.Ping}ms");
                
                LobbyStatusText.Text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ";
                LobbyStatusText.Foreground = new SolidColorBrush(Color.FromRgb(0x28, 0xA7, 0x45)); // Green
                
                LobbyIpText.Text = $"{tcpConnection.RemoteAddress}:{tcpConnection.RemotePort}";
                CopyLobbyIpButton.Visibility = Visibility.Visible;
                
                LobbyServerText.Text = tcpConnection.ServerName;
                LobbyRegionText.Text = tcpConnection.Region;
                
                LobbyPingText.Text = tcpConnection.Ping >= 0 
                    ? $"{tcpConnection.Ping} ms" 
                    : "–ù–µ –∏–∑–º–µ—Ä–µ–Ω";
                LobbyPingText.Foreground = GetPingColor(tcpConnection.Ping);
                
                Debug.WriteLine($"   ‚úÖ UI –ª–æ–±–±–∏ –æ–±–Ω–æ–≤–ª–µ–Ω");
            }
            else
            {
                LobbyStatusText.Text = "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ";
                LobbyStatusText.Foreground = new SolidColorBrush(Color.FromRgb(0xDC, 0x14, 0x3C)); // Red
                
                LobbyIpText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
                CopyLobbyIpButton.Visibility = Visibility.Collapsed;
                
                LobbyServerText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
                LobbyRegionText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
                LobbyPingText.Text = "–ù–µ –∏–∑–º–µ—Ä–µ–Ω";
                LobbyPingText.Foreground = new SolidColorBrush(Color.FromRgb(0xB0, 0xB0, 0xB0));
                
                Debug.WriteLine($"   ‚ö†Ô∏è TCP –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'");
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π IP –ª–æ–±–±–∏
                _lastLobbyIp = null;
                _lastLobbyPort = 0;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UDP (–∏–≥—Ä–∞)
            if (udpConnection != null)
            {
                GameStatusText.Text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ";
                GameStatusText.Foreground = new SolidColorBrush(Color.FromRgb(0x28, 0xA7, 0x45)); // Green
                
                GameIpText.Text = $"{udpConnection.RemoteAddress}:{udpConnection.RemotePort}";
                CopyGameIpButton.Visibility = Visibility.Visible;
                
                GameServerText.Text = udpConnection.ServerName;
                GameRegionText.Text = udpConnection.Region;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ IP –∞–¥—Ä–µ—Å –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º IP –∏–≥—Ä—ã (–Ω–µ —Å GameLift —Ö–æ—Å—Ç–æ–º!)
                bool ipChanged = _lastGameIp != udpConnection.RemoteAddress || 
                                 _lastGamePort != udpConnection.RemotePort;
                
                Debug.WriteLine($"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è IP: last={_lastGameIp}:{_lastGamePort}, current={udpConnection.RemoteAddress}:{udpConnection.RemotePort}, changed={ipChanged}");
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–Ω–≥ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ IP –∏–∑–º–µ–Ω–∏–ª—Å—è (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–æ—Ä–≥–∞–Ω–∏—è)
                // –ò–Ω–∞—á–µ —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∏–Ω–≥ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                if (ipChanged)
                {
                    Debug.WriteLine($"üîÑ IP –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥–µ—Ä");
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π IP –î–û –∑–∞–ø—É—Å–∫–∞ –ø–∏–Ω–≥–µ—Ä–∞
                    _lastGameIp = udpConnection.RemoteAddress;
                    _lastGamePort = udpConnection.RemotePort;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ –∏–ª–∏ "–ò–∑–º–µ—Ä—è–µ—Ç—Å—è..."
                    if (udpConnection.Ping >= 0)
                    {
                        GamePingText.Text = $"{udpConnection.Ping} ms";
                        GamePingText.Foreground = GetPingColor(udpConnection.Ping);
                    }
                    else
                    {
                        GamePingText.Text = "–ò–∑–º–µ—Ä—è–µ—Ç—Å—è...";
                        GamePingText.Foreground = new SolidColorBrush(Color.FromRgb(0xFF, 0xC1, 0x07)); // Yellow
                    }
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º DispatcherTimer –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∏–Ω–≥–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å—Ç–∞—Ä—ã–π –µ—Å–ª–∏ –±—ã–ª)
                    StartPingMonitoring(udpConnection.RemoteAddress, udpConnection.RemotePort);
                }
                else
                {
                    Debug.WriteLine($"‚úÖ IP –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–∏–Ω–≥");
                }
                // –ï—Å–ª–∏ IP –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)
                // –§–æ–Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –ø–∏–Ω–≥–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç GamePingText –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            }
            else
            {
                // –ù–µ—Ç UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
                Debug.WriteLine("‚ö†Ô∏è UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã");
                
                GameStatusText.Text = "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ";
                GameStatusText.Foreground = new SolidColorBrush(Color.FromRgb(0xDC, 0x14, 0x3C)); // Red
                
                GameIpText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
                CopyGameIpButton.Visibility = Visibility.Collapsed;
                
                GameServerText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
                GameRegionText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
                GamePingText.Text = "–ù–µ –∏–∑–º–µ—Ä–µ–Ω";
                GamePingText.Foreground = new SolidColorBrush(Color.FromRgb(0xB0, 0xB0, 0xB0));
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π IP –∏–≥—Ä—ã
                _lastGameIp = null;
                _lastGamePort = 0;
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏–Ω–≥–∞
                StopPingMonitoring();
            }
            
            return Task.CompletedTask;
        }

        private void UpdateNoConnection()
        {
            LobbyStatusText.Text = "–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞";
            LobbyStatusText.Foreground = new SolidColorBrush(Color.FromRgb(0x80, 0x80, 0x80)); // Gray
            LobbyIpText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
            CopyLobbyIpButton.Visibility = Visibility.Collapsed;
            LobbyServerText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
            LobbyRegionText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
            LobbyPingText.Text = "–ù–µ –∏–∑–º–µ—Ä–µ–Ω";

            GameStatusText.Text = "–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞";
            GameStatusText.Foreground = new SolidColorBrush(Color.FromRgb(0x80, 0x80, 0x80)); // Gray
            GameIpText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
            CopyGameIpButton.Visibility = Visibility.Collapsed;
            GameServerText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
            GameRegionText.Text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
            GamePingText.Text = "–ù–µ –∏–∑–º–µ—Ä–µ–Ω";
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ IP
            _lastLobbyIp = null;
            _lastLobbyPort = 0;
            _lastGameIp = null;
            _lastGamePort = 0;
            
            // –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ—Ä—Ç—ã
            _monitoredUdpPorts.Clear();
            _udpMonitorStarted = false;
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏–Ω–≥–∞
            StopPingMonitoring();
        }

        private void UpdateLastUpdateTime()
        {
            LastUpdateText.Text = $"{DateTime.Now:dd.MM.yyyy HH:mm:ss}";
        }

        private SolidColorBrush GetPingColor(long ping)
        {
            if (ping < 0) return new SolidColorBrush(Color.FromRgb(0x80, 0x80, 0x80)); // Gray
            if (ping < 80) return new SolidColorBrush(Color.FromRgb(0x28, 0xA7, 0x45)); // Green
            if (ping < 130) return new SolidColorBrush(Color.FromRgb(0xFF, 0xC1, 0x07)); // Yellow
            if (ping < 250) return new SolidColorBrush(Color.FromRgb(0xDC, 0x14, 0x3C)); // Red
            return new SolidColorBrush(Color.FromRgb(0x6F, 0x42, 0xC1)); // Purple
        }

        #endregion

        #region Background Ping Monitoring

        // –ú–∞–ø–ø–∏–Ω–≥ AWS —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–∞ GameLift —Ö–æ—Å—Ç—ã (—Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        // hosts[0] - –æ—Å–Ω–æ–≤–Ω–æ–π endpoint, hosts[1] - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ping endpoint
        private readonly Dictionary<string, string[]> _awsRegionToGameLiftHosts = new()
        {
            // Europe
            { "eu-west-2", new[]{ "gamelift.eu-west-2.amazonaws.com", "gamelift-ping.eu-west-2.api.aws" } },      // London
            { "eu-west-1", new[]{ "gamelift.eu-west-1.amazonaws.com", "gamelift-ping.eu-west-1.api.aws" } },      // Ireland
            { "eu-central-1", new[]{ "gamelift.eu-central-1.amazonaws.com", "gamelift-ping.eu-central-1.api.aws" } }, // Frankfurt
            
            // Americas
            { "us-east-1", new[]{ "gamelift.us-east-1.amazonaws.com", "gamelift-ping.us-east-1.api.aws" } },      // N. Virginia
            { "us-east-2", new[]{ "gamelift.us-east-2.amazonaws.com", "gamelift-ping.us-east-2.api.aws" } },      // Ohio
            { "us-west-1", new[]{ "gamelift.us-west-1.amazonaws.com", "gamelift-ping.us-west-1.api.aws" } },      // N. California
            { "us-west-2", new[]{ "gamelift.us-west-2.amazonaws.com", "gamelift-ping.us-west-2.api.aws" } },      // Oregon
            { "ca-central-1", new[]{ "gamelift.ca-central-1.amazonaws.com", "gamelift-ping.ca-central-1.api.aws" } }, // Canada
            { "sa-east-1", new[]{ "gamelift.sa-east-1.amazonaws.com", "gamelift-ping.sa-east-1.api.aws" } },      // S√£o Paulo
            
            // Asia Pacific
            { "ap-northeast-1", new[]{ "gamelift.ap-northeast-1.amazonaws.com", "gamelift-ping.ap-northeast-1.api.aws" } }, // Tokyo
            { "ap-northeast-2", new[]{ "gamelift.ap-northeast-2.amazonaws.com", "gamelift-ping.ap-northeast-2.api.aws" } }, // Seoul
            { "ap-south-1", new[]{ "gamelift.ap-south-1.amazonaws.com", "gamelift-ping.ap-south-1.api.aws" } },        // Mumbai
            { "ap-southeast-1", new[]{ "gamelift.ap-southeast-1.amazonaws.com", "gamelift-ping.ap-southeast-1.api.aws" } }, // Singapore
            { "ap-east-1", new[]{ "ec2.ap-east-1.amazonaws.com", "gamelift-ping.ap-east-1.api.aws" } },               // Hong Kong
            { "ap-southeast-2", new[]{ "gamelift.ap-southeast-2.amazonaws.com", "gamelift-ping.ap-southeast-2.api.aws" } }, // Sydney
            
            // China
            { "cn-north-1", new[]{ "gamelift.cn-north-1.amazonaws.com.cn" } },     // Beijing
            { "cn-northwest-1", new[]{ "gamelift.cn-northwest-1.amazonaws.com.cn" } }, // Ningxia
        };

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏–Ω–≥–∞ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        /// –ü–∏–Ω–≥—É–µ—Ç GameLift —Ö–æ—Å—Ç —Ç–æ–≥–æ –∂–µ AWS —Ä–µ–≥–∏–æ–Ω–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω —á–µ—Ä–µ–∑ DNS hostname)
        /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DispatcherTimer –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
        /// </summary>
        private async void StartPingMonitoring(string ipAddress, int port)
        {
            Debug.WriteLine($"üé¨ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –ø–∏–Ω–≥–µ—Ä–∞ –¥–ª—è {ipAddress}:{port}");
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –±—ã–ª
            StopPingMonitoring();
            
            Debug.WriteLine($"‚úÖ –°—Ç–∞—Ä—ã–π –ø–∏–Ω–≥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π");

            _currentGameServerIp = ipAddress;
            _currentGameServerPort = port;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º AWS —Ä–µ–≥–∏–æ–Ω —á–µ—Ä–µ–∑ Reverse DNS (PTR –∑–∞–ø–∏—Å—å)
            string awsRegion = await GetAwsRegionFromDnsAsync(ipAddress);
            
            Debug.WriteLine($"üåç –ò–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä {ipAddress} ‚Üí —Ä–µ–≥–∏–æ–Ω: {awsRegion}");

            // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π GameLift —Ö–æ—Å—Ç (—Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            if (string.IsNullOrEmpty(awsRegion) || 
                !_awsRegionToGameLiftHosts.TryGetValue(awsRegion, out var hosts) || hosts.Length == 0)
            {
                Debug.WriteLine($"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω GameLift —Ö–æ—Å—Ç –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '{awsRegion}', –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø–∏–Ω–≥");
                _currentGameServerIp = ipAddress; // Fallback - –ø–∏–Ω–≥—É–µ–º —Å–∞–º IP
            }
            else
            {
                // –ü–∏–Ω–≥—É–µ–º hosts[0] –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                _currentGameServerIp = hosts[0];
                Debug.WriteLine($"‚úÖ –ë—É–¥–µ–º –ø–∏–Ω–≥–æ–≤–∞—Ç—å GameLift —Ö–æ—Å—Ç: {_currentGameServerIp}");
            }

            Debug.WriteLine($"üèì –ó–∞–ø—É—Å–∫ DispatcherTimer –ø–∏–Ω–≥–∞ –∫ {_currentGameServerIp} (—Å—Ç—Ä–æ–≥–æ 1 —Ä–∞–∑/—Å–µ–∫)");

            // –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π Ping –æ–±—ä–µ–∫—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            _backgroundPinger = new Ping();

            // –°–æ–∑–¥–∞—ë–º DispatcherTimer (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ UI –ø–æ—Ç–æ–∫–µ, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å)
            _pingTimer = new DispatcherTimer 
            { 
                Interval = TimeSpan.FromSeconds(1) 
            };
            _pingTimer.Tick += async (_, __) => await UpdatePingAsync();
            _pingTimer.Start();
            
            Debug.WriteLine($"‚úÖ DispatcherTimer —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –ø–∏–Ω–≥ —Å—Ä–∞–∑—É (–Ω–µ –∂–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É)
            _ = UpdatePingAsync();
        }

        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç AWS —Ä–µ–≥–∏–æ–Ω –ø–æ hostname —á–µ—Ä–µ–∑ Reverse DNS
        /// –ù–∞–ø—Ä–∏–º–µ—Ä: ec2-63-176-61-172.eu-central-1.compute.amazonaws.com ‚Üí eu-central-1
        /// </summary>
        private async Task<string> GetAwsRegionFromDnsAsync(string ipAddress)
        {
            try
            {
                Debug.WriteLine($"üîç Reverse DNS lookup –¥–ª—è {ipAddress}...");
                
                var hostEntry = await Dns.GetHostEntryAsync(ipAddress);
                var hostname = hostEntry.HostName;
                
                Debug.WriteLine($"   Hostname: {hostname}");
                
                // –ü–∞—Ä—Å–∏–º AWS —Ä–µ–≥–∏–æ–Ω –∏–∑ hostname
                // –§–æ—Ä–º–∞—Ç: ec2-X-X-X-X.REGION.compute.amazonaws.com
                // –ò–ª–∏: X-X-X-X.REGION.elb.amazonaws.com
                if (hostname.Contains(".amazonaws.com"))
                {
                    var parts = hostname.Split('.');
                    
                    // –ò—â–µ–º —á–∞—Å—Ç—å –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ AWS —Ä–µ–≥–∏–æ–Ω (—Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–∏—Å—ã –∏ —Ü–∏—Ñ—Ä—É)
                    foreach (var part in parts)
                    {
                        // AWS —Ä–µ–≥–∏–æ–Ω —Ñ–æ—Ä–º–∞—Ç: us-east-1, eu-central-1, ap-northeast-2 –∏ —Ç.–¥.
                        if (part.Contains('-') && System.Text.RegularExpressions.Regex.IsMatch(part, @"^[a-z]{2}-[a-z]+-\d+$"))
                        {
                            Debug.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω AWS —Ä–µ–≥–∏–æ–Ω –∏–∑ DNS: {part}");
                            return part;
                        }
                    }
                    
                    Debug.WriteLine($"‚ö†Ô∏è AWS hostname –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ä–µ–≥–∏–æ–Ω –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω");
                }
                else
                {
                    Debug.WriteLine($"‚ö†Ô∏è Hostname –Ω–µ AWS ({hostname})");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ö†Ô∏è Reverse DNS –æ—à–∏–±–∫–∞: {ex.Message}");
            }
            
            return string.Empty;
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏–Ω–≥–∞
        /// –ü—Ä–æ—Å—Ç–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç DispatcherTimer
        /// </summary>
        private void StopPingMonitoring()
        {
            if (_pingTimer == null)
            {
                return; // –¢–∞–π–º–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            }
            
            Debug.WriteLine($"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ DispatcherTimer –ø–∏–Ω–≥–∞");
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            _pingTimer.Stop();
            _pingTimer = null;
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            if (_backgroundPinger != null)
            {
                _backgroundPinger.Dispose();
                _backgroundPinger = null;
            }
            
            _currentGameServerIp = null;
            _currentGameServerPort = 0;
            
            Debug.WriteLine($"‚úÖ DispatcherTimer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∏–Ω–≥ –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è DispatcherTimer –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
        /// –†–∞–±–æ—Ç–∞–µ—Ç –≤ UI –ø–æ—Ç–æ–∫–µ, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
        /// </summary>
        private async Task UpdatePingAsync()
        {
            if (string.IsNullOrEmpty(_currentGameServerIp) || _backgroundPinger == null)
            {
                Debug.WriteLine("‚ö†Ô∏è UpdatePingAsync: –ø–∏–Ω–≥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ IP –ø—É—Å—Ç");
                return;
            }

            long ping = -1;
            
            try
            {
                Debug.WriteLine($"üèì –ü–æ–ø—ã—Ç–∫–∞ –ø–∏–Ω–≥–∞ –∫ {_currentGameServerIp}...");
                
                // –ü—Ä–æ—Å—Ç–æ–π ICMP ping –∫ GameLift —Ö–æ—Å—Ç—É (–∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
                var reply = await _backgroundPinger.SendPingAsync(_currentGameServerIp, 2000);
                
                if (reply.Status == IPStatus.Success)
                {
                    ping = reply.RoundtripTime;
                    Debug.WriteLine($"‚úÖ –ü–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {ping}ms");
                }
                else
                {
                    Debug.WriteLine($"‚ùå –•–æ—Å—Ç {_currentGameServerIp} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {reply.Status}");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {ex.Message}");
                Debug.WriteLine($"   StackTrace: {ex.StackTrace}");
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI (—É–∂–µ –≤ UI –ø–æ—Ç–æ–∫–µ –±–ª–∞–≥–æ–¥–∞—Ä—è DispatcherTimer!)
            // –í–ê–ñ–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–∏–Ω–≥–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–æ—Ä–≥–∞–Ω–∏—è –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–∞—Ö
            if (ping >= 0)
            {
                GamePingText.Text = $"{ping} ms";
                GamePingText.Foreground = GetPingColor(ping);
                Debug.WriteLine($"   ‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω: {ping}ms");
            }
            else
            {
                // –ï—Å–ª–∏ –ø–∏–Ω–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ä–≥–∞–Ω–∏–µ "50ms" -> "–ù–µ –∏–∑–º–µ—Ä–µ–Ω" -> "50ms"
                Debug.WriteLine($"   ‚ö†Ô∏è –ü–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ");
            }
        }

        #endregion

        #region Event Handlers

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private async void RefreshButton_Click(object sender, RoutedEventArgs e)
        {
            await MonitorConnectionsAsync();
        }

        private void CopyLobbyIpButton_Click(object sender, RoutedEventArgs e)
        {
            if (_currentLobbyConnection != null)
            {
                var text = $"{_currentLobbyConnection.RemoteAddress}:{_currentLobbyConnection.RemotePort}";
                Clipboard.SetText(text);
                ShowCopyNotification("–õ–æ–±–±–∏ IP —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
            }
        }

        private void CopyGameIpButton_Click(object sender, RoutedEventArgs e)
        {
            if (_currentGameConnection != null)
            {
                var text = $"{_currentGameConnection.RemoteAddress}:{_currentGameConnection.RemotePort}";
                Clipboard.SetText(text);
                ShowCopyNotification("IP –º–∞—Ç—á–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
            }
        }

        private void ShowCopyNotification(string message)
        {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ
            var originalText = LastUpdateText.Text;
            LastUpdateText.Text = message;
            LastUpdateText.Foreground = new SolidColorBrush(Color.FromRgb(0x28, 0xA7, 0x45));
            
            Task.Delay(2000).ContinueWith(_ => 
            {
                Dispatcher.Invoke(() => 
                {
                    LastUpdateText.Text = originalText;
                    LastUpdateText.Foreground = new SolidColorBrush(Colors.White);
                });
            });
        }

        #endregion

        #region Helper Classes

        private class ConnectionInfo
        {
            public string Protocol { get; set; } = "";
            public string LocalAddress { get; set; } = "";
            public int LocalPort { get; set; }
            public string RemoteAddress { get; set; } = "";
            public int RemotePort { get; set; }
            public int ProcessId { get; set; }
            public TcpState State { get; set; }
            public long Ping { get; set; } = -1;
            public string Region { get; set; } = "";
            public string ServerName { get; set; } = "";
        }

        #endregion
    }
}
