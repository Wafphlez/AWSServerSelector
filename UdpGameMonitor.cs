using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using SharpPcap;
using PacketDotNet;

namespace AWSServerSelector
{
    /// <summary>
    /// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ UDP —Ç—Ä–∞—Ñ–∏–∫–∞ Dead by Daylight –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP —Å–µ—Ä–≤–µ—Ä–∞ –∏–≥—Ä—ã –∏ –ø–∏–Ω–≥–∞
    /// </summary>
    public class UdpGameMonitor : IDisposable
    {
        private ILiveDevice? _device;
        private bool _isCapturing = false;
        private CancellationTokenSource? _cts;
        
        // –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        private ConcurrentDictionary<string, GameServerInfo> _gameServers = new();
        
        // –ü–æ—Ä—Ç—ã DBD –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        private HashSet<int> _dbdPorts = new();
        
        public event EventHandler<GameServerInfo>? GameServerDetected;

        public class GameServerInfo
        {
            public string RemoteAddress { get; set; } = "";
            public int RemotePort { get; set; }
            public int LocalPort { get; set; }
            public DateTime LastSeen { get; set; }
            public long PacketCount { get; set; }
            public long BytesReceived { get; set; }
            public long BytesSent { get; set; }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä (—Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é)
        /// </summary>
        public GameServerInfo? GetActiveGameServer()
        {
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥ - –±—ã—Å—Ç—Ä–µ–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –º–∞—Ç—á–∞)
            var cutoff = DateTime.Now.AddSeconds(-10);
            var activeServers = _gameServers
                .Where(kvp => kvp.Value.LastSeen > cutoff)
                .Select(kvp => kvp.Value)
                .ToList();

            if (!activeServers.Any())
                return null;

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
            return activeServers
                .OrderByDescending(s => s.PacketCount)
                .ThenByDescending(s => s.BytesReceived + s.BytesSent)
                .FirstOrDefault();
        }

        /// <summary>
        /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ DBD
        /// </summary>
        public bool StartCapture(HashSet<int> dbdPorts)
        {
            try
            {
                _dbdPorts = dbdPorts;
                
                Debug.WriteLine($"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ UDP –¥–ª—è –ø–æ—Ä—Ç–æ–≤: {string.Join(", ", dbdPorts.Take(5))}...");

                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                var devices = CaptureDeviceList.Instance;
                
                Debug.WriteLine($"üì° –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {devices.Count}");
                
                if (devices.Count == 0)
                {
                    Debug.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Npcap.");
                    Debug.WriteLine("üí° –°–∫–∞—á–∞–π—Ç–µ Npcap: https://npcap.com/#download");
                    Debug.WriteLine("üí° –ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∫–ª—é—á–∏—Ç–µ: 'Install in WinPcap API-compatible Mode'");
                    return false;
                }

                // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                Debug.WriteLine("üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:");
                for (int i = 0; i < devices.Count; i++)
                {
                    var dev = devices[i];
                    Debug.WriteLine($"  [{i}] {dev.Name}");
                    Debug.WriteLine($"      –û–ø–∏—Å–∞–Ω–∏–µ: {dev.Description}");
                    if (dev is ILiveDevice liveDevice)
                    {
                        Debug.WriteLine($"      Started: {liveDevice.Started}");
                        // LinkType –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    }
                }

                // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –ù–ï loopback, –ù–ï WAN Miniport
                Debug.WriteLine("üîç –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...");
                _device = devices
                    .OfType<ILiveDevice>()
                    .FirstOrDefault(d => d.Started == false && 
                                       !d.Name.Contains("Loopback") &&
                                       !d.Description.Contains("Miniport") &&
                                       !d.Description.Contains("Pseudo") &&
                                       (d.Description.Contains("Ethernet") || 
                                        d.Description.Contains("Wi-Fi") ||
                                        d.Description.Contains("Wireless") ||
                                        d.Description.Contains("802.11")));

                if (_device == null)
                {
                    Debug.WriteLine("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ Ethernet/WiFi —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –ø—Ä–æ–±—É–µ–º –ª—é–±–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ...");
                    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –Ω–µ-loopback, –Ω–µ-miniport —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                    _device = devices
                        .OfType<ILiveDevice>()
                        .FirstOrDefault(d => d.Started == false && 
                                           !d.Name.Contains("Loopback") &&
                                           !d.Description.Contains("Miniport") &&
                                           !d.Description.Contains("Pseudo"));
                }

                if (_device == null)
                {
                    Debug.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");
                    return false;
                }

                Debug.WriteLine($"‚úÖ –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {_device.Name}");
                Debug.WriteLine($"   –û–ø–∏—Å–∞–Ω–∏–µ: {_device.Description}");

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                _device.OnPacketArrival += Device_OnPacketArrival;
                
                Debug.WriteLine("üîì –û—Ç–∫—Ä—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...");
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ promiscuous mode
                try
                {
                    _device.Open(new DeviceConfiguration
                    {
                        Mode = DeviceModes.Promiscuous,
                        ReadTimeout = 1000,
                        Snaplen = 65536
                    });
                    
                    Debug.WriteLine("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ");
                }
                catch (SharpPcap.DeviceNotReadyException ex)
                {
                    Debug.WriteLine($"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≥–æ—Ç–æ–≤–æ: {ex.Message}");
                    Debug.WriteLine("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
                    Debug.WriteLine("   1. Npcap —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä");
                    Debug.WriteLine("   2. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π");
                    Debug.WriteLine("   3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
                    return false;
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ UDP —Ç—Ä–∞—Ñ–∏–∫
                Debug.WriteLine("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ UDP...");
                _device.Filter = "udp";
                Debug.WriteLine("‚úÖ –§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

                _cts = new CancellationTokenSource();
                _isCapturing = true;

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ö–≤–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                Task.Run(() =>
                {
                    try
                    {
                        Debug.WriteLine("üéØ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç –ø–∞–∫–µ—Ç–æ–≤...");
                        _device.Capture();
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –ø–∞–∫–µ—Ç–æ–≤: {ex.Message}");
                        Debug.WriteLine($"   StackTrace: {ex.StackTrace}");
                    }
                }, _cts.Token);

                Debug.WriteLine("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ UDP —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
                return true;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
                Debug.WriteLine($"   –¢–∏–ø: {ex.GetType().Name}");
                Debug.WriteLine($"   StackTrace: {ex.StackTrace}");
                
                if (ex.InnerException != null)
                {
                    Debug.WriteLine($"   Inner Exception: {ex.InnerException.Message}");
                }
                
                return false;
            }
        }

        private void Device_OnPacketArrival(object sender, PacketCapture e)
        {
            try
            {
                var rawPacket = e.GetPacket();
                var packet = Packet.ParsePacket(rawPacket.LinkLayerType, rawPacket.Data);

                var ipPacket = packet.Extract<IPPacket>();
                var udpPacket = packet.Extract<UdpPacket>();

                if (ipPacket == null || udpPacket == null)
                    return;

                var sourcePort = udpPacket.SourcePort;
                var destPort = udpPacket.DestinationPort;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–∞–∫–µ—Ç –∫ –ø–æ—Ä—Ç–∞–º DBD
                bool isDbdTraffic = _dbdPorts.Contains(sourcePort) || _dbdPorts.Contains(destPort);

                if (!isDbdTraffic)
                    return;

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ (–∏—Å—Ö–æ–¥—è—â–∏–π –∏–ª–∏ –≤—Ö–æ–¥—è—â–∏–π)
                bool isOutgoing = _dbdPorts.Contains(sourcePort);
                bool isIncoming = _dbdPorts.Contains(destPort);

                string remoteIp;
                int remotePort;
                int localPort;

                if (isOutgoing)
                {
                    // –ü–∞–∫–µ—Ç –æ—Ç –Ω–∞—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
                    remoteIp = ipPacket.DestinationAddress.ToString();
                    remotePort = destPort;
                    localPort = sourcePort;
                }
                else
                {
                    // –ü–∞–∫–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ –Ω–∞–º
                    remoteIp = ipPacket.SourceAddress.ToString();
                    remotePort = sourcePort;
                    localPort = destPort;
                }

                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                if (IsLocalAddress(remoteIp))
                    return;

                var key = $"{remoteIp}:{remotePort}:{localPort}";
                var now = DateTime.Now;

                var serverInfo = _gameServers.GetOrAdd(key, k => new GameServerInfo
                {
                    RemoteAddress = remoteIp,
                    RemotePort = remotePort,
                    LocalPort = localPort,
                    LastSeen = now
                });

                serverInfo.LastSeen = now;
                serverInfo.PacketCount++;

                if (isIncoming)
                {
                    serverInfo.BytesReceived += udpPacket.PayloadData?.Length ?? 0;
                }
                else
                {
                    serverInfo.BytesSent += udpPacket.PayloadData?.Length ?? 0;
                }

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
                if (serverInfo.PacketCount == 1)
                {
                    Debug.WriteLine($"üéÆ –ò–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä: {remoteIp}:{remotePort} | –ü–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ");
                    GameServerDetected?.Invoke(this, serverInfo);
                }
                else if (serverInfo.PacketCount % 1000 == 0)
                {
                    Debug.WriteLine($"üéÆ –ò–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä: {remoteIp}:{remotePort} | –ü–∞–∫–µ—Ç–æ–≤: {serverInfo.PacketCount}");
                    GameServerDetected?.Invoke(this, serverInfo);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞: {ex.Message}");
            }
        }

        private bool IsLocalAddress(string address)
        {
            if (string.IsNullOrEmpty(address)) return true;

            if (address.StartsWith("127.") ||
                address.StartsWith("192.168.") ||
                address.StartsWith("10.") ||
                address.StartsWith("172.16.") ||
                address.StartsWith("169.254.") ||
                address == "0.0.0.0" ||
                address == "::" ||
                address == "::1")
            {
                return true;
            }

            return false;
        }

        public void StopCapture()
        {
            try
            {
                if (_device != null && _isCapturing)
                {
                    _cts?.Cancel();
                    _device.StopCapture();
                    _device.Close();
                    _isCapturing = false;
                    Debug.WriteLine("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ UDP –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
            }
        }

        public void Dispose()
        {
            StopCapture();
            _device?.Dispose();
            _cts?.Dispose();
        }
    }
}

